package cn.nuaa.qjj.main;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import cn.nuaa.qjj.check.TaskFinishCheck;
import cn.nuaa.qjj.check.TaskSheduleCheck;
import cn.nuaa.qjj.domain.Data;
import cn.nuaa.qjj.domain.Disk;
import cn.nuaa.qjj.domain.Job;
import cn.nuaa.qjj.domain.NVM;
import cn.nuaa.qjj.domain.Task;
import cn.nuaa.qjj.init.DataInit;

public class MainSchdule {
	public static final int readDataTime = 1; // ???????Disk????NVM??????????,??????λ???????????
	public static final int m = 112; // CPU??solts?????,????64
	public static final int n = 100; // NVM??solts?????,????50
	public static final double p = 0.5; // ?????????NVM?е?????
	public static final int H1 = 2; // ???hotness???? hotness = H1+H2*Lable
	public static final int H2 = 2; // ??????????????????????hotness??????
	public static final int CH = -500; // hotness??????????-500
	public static final int w0 = 5;
	public static final int a = -1;
	public static final int w1 = 3;
	public static final int w2 = -2;

	public static boolean existMigration = false; // ??????????????????Э????????????????
	public static boolean filePipe = false; // ??д??????????????????? false
	public static int timeStamp = 0; // ?????????????????????0??
	public static int sumJobs = 0; // ????????????job????
	public static int timeSlot = 0; // ???????Ψ???????
	public static int acceptJobs = 0; // ????????job????
	public static int rejectJobs = 0; // ????????job???????????
	public static int NVMWriteTimes = 0; // ???nvmд????????
	public static int dataInNVMTimes = 0; // ???????nvm????????

	public static List<Job> finishJobs = new ArrayList<Job>(); // ????????????jobs
	public static List<Task> finishTasks = new ArrayList<Task>();// ??????????????
	public static List<Job> waitingJobs = new ArrayList<Job>(); // ??????????????????jobs
	public static List<Task> runningTasks = new ArrayList<Task>(); // ???????????????????е?tasks
	public static List<Job> rejectJob = new ArrayList<Job>(); // ???????????о????job
	public static List<Job> acceptJob = new ArrayList<Job>(); // ???????????????е?job

	public static Map<Integer, Integer> perUtility = new TreeMap<Integer, Integer>(new Comparator<Integer>() {
		@Override
		public int compare(Integer obj1, Integer obj2) {
			// ????????
			return obj1.compareTo(obj2);
		}
	});

	public static Map<Integer, Double> relaUtility = new TreeMap<Integer, Double>(new Comparator<Integer>() {
		@Override
		public int compare(Integer obj1, Integer obj2) {
			// ????????
			return obj1.compareTo(obj2);
		}
	});

	public static void main(String[] args) {
		/*
		 * 1.?????Disk???????Data???? 2.?????????Job?? 3.??????????????????????Disk-->NVM??n??slots????
		 */
		List<Job> jobList = new DataInit().dataInput();
		new DataAbout().firstMigration();

		while (true) {
			// 1 ????????????
			List<Job> arriveJobList = new TaskAbout().arriveJobs(jobList);

			// 2 ????????????????У??????????????????????????????????
			new TaskAbout().acceptJob(arriveJobList);
			new TaskSheduleCheck().taskSheduleCheck();// cpu???е??????????????????????
			// 3 ?????????????????????????
			new DataAbout().canDoMigration();

			MainSchdule.timeSlot++;

			System.out.println("?????? " + MainSchdule.timeSlot);

			new TaskFinishCheck().taskFinishCheck();// ??????????????е???????,??????
			new DataAbout().changeHotness();// ?????????????hotness???,??????

			perUtility.put(timeSlot, new DataStatistics().getUtility());
			relaUtility.put(timeSlot, new DataStatistics().calc(new DataStatistics().getUtility(), timeSlot * w0 * m));

			System.out.println(MainSchdule.timeSlot + "????????????  " + runningTasks.size() + " ??????");
			if (MainSchdule.timeSlot > 3500) {
				break;
			}
			

		}

		/*
		 * for (Job job : finishJobs) { if(job.getJobID() == 164){
		 * System.out.println(job.toString()); }
		 * 
		 * }
		 */
		// ???е??????????????????????????

		/*System.out.println("?????job?У?    ");
		for (Job job : rejectJob) {
			System.out.println(job.toString());
		}*/

		System.out.println("??????????????????? " + new DataStatistics().getAcceptTate());
		System.out.print("???????NVMд????????? " + new DataStatistics().getNVMWriteTimes());
		System.out.println("???????NVM??????????? " + new DataStatistics().NVMHitRate());
		System.out.println("??????????Utility??? " + new DataStatistics().getUtility());

	/*	System.out.println("???????Ч??===================================");
		for (Integer set : perUtility.keySet()) {
			int u = perUtility.get(set);
			System.out.print(set + "???????棺" + String.valueOf(u) + ",");
		}*/

/*		for(Data dt :Disk.disk){
			System.out.println(dt);
		}
		System.out.println("nvm ==========================================");
		for(Data data :NVM.nvm){
			System.out.println(data);
		}*/
	/*	for (Job job : finishJobs) {
			System.out.println(job.toString());
		}*/
		// SavaJson.save();// ?????е?utilityд??json???

	}

}
